# -*- coding: utf-8 -*-
"""
Created on Sat Oct 10 12:02:57 2015

@author: charlie
"""
import numpy as np
import skimage.filters
import skimage.io
import skimage.transform
import random 
import math

'''
Generate unlabelled 1pt data
'''
def gen_one_point_inputs_unlabelled(n=28,sigma=2.0, multiplier = 5):
    
    #dataX for 1 point
    one_point_X = []
    a = np.array([skimage.filters.gaussian_filter(i,sigma) for i in ((np.eye(n*n)*10)).reshape(n,n,n*n).transpose()]).reshape(n*n,n*n)
    for i in range(multiplier):
        for j in range(n*n):
            one_point_X.append(a[j])
    one_point_X = np.asarray(one_point_X)
    
    return np.random.permutation(one_point_X)

'''
Generate labelled 1pt and 2pt data, where the 2pt data are chosen randomly
'''
def gen_one_and_two_point_inputs_labelled_random_two_points(n=28,sigma=2.0):
    
    #data for 1 point
    one_point_X = np.array([skimage.filters.gaussian_filter(i,sigma) for i in ((np.eye(n*n)*10)).reshape(n,n,n*n).transpose()]).reshape(n*n,n*n)
    one_point_Y = np.zeros((n*n,2)) #labels for 1 point
    for i in range(n*n): one_point_Y[i][0]=1 
    one_point_distance = np.zeros(n*n)
    
    #data for 2 points
    two_point_X = np.zeros((n*n,n*n))
    two_point_distance = np.zeros(n*n)
    for i in range(0, n*n):
        a = np.zeros((n,n))
        a[0,0]=1
        a[1,0]=1
        b1 = np.random.permutation(a[0])
        b2 = np.random.permutation(a[1])
        a[0] = b1
        a[1] = b2
        c = np.random.permutation(a)
        dist = math.sqrt((np.where(c==1)[0][0]-np.where(c==1)[0][1])**2 + 
        (np.where(c==1)[1][0]-np.where(c==1)[1][1])**2)
        two_point_distance[i]=dist
        d = skimage.filters.gaussian_filter(c, sigma)
        f = d.reshape(784,)
        two_point_X[i] = f
        
    two_point_Y = np.zeros((n*n,2)) #labels for 2 points
    for i in range(n*n): two_point_Y[i][1]=1
    
    #merge 1 pt and 2pts data
    data_X = np.concatenate((one_point_X,two_point_X))
    data_Y = np.concatenate((one_point_Y,two_point_Y))
    data_distance= np.concatenate((one_point_distance,two_point_distance))
    temp = list(zip(data_X,data_Y,data_distance))
    random.shuffle(temp)
    data_X, data_Y, data_distance = zip(*temp)
    return np.asarray(data_X), np.asarray(data_Y), np.asarray(data_distance)

'''
Generate labelled 1pt and 2pt data, 
where the 2pt data cover all possibilities spaced 4 pixels apart.
Total of about 15000 instances of each type of data
'''
def gen_one_and_two_point_inputs_labelled_set_two_points(n=28, sigma=2.0):
    
    #dataX for 1 point
    one_point_X = []
    a = np.array([skimage.filters.gaussian_filter(i,sigma) for i in ((np.eye(n*n)*10)).reshape(n,n,n*n).transpose()]).reshape(n*n,n*n)
    for i in range(5):
        for j in range(n*n):
            one_point_X.append(a[j])
    one_point_X = np.asarray(one_point_X)
    #dataY for 1 point
    one_point_Y = np.zeros((len(one_point_X),2))
    for i in range(len(one_point_X)): 
        one_point_Y[i][0]=1.    
        
    #data for 2 points
    two_point_X = []
    for i in range(0,784,4):
        for j in range(i+4, 784,4):
            a = np.zeros(784)
            a[i] = 1
            a[j] = 1
            a = a.reshape((28,28))
            a = skimage.filters.gaussian_filter(a, sigma)
            a = a.reshape(784,)
            two_point_X.append(a)
    two_point_X = np.asarray(two_point_X)
    #dataY for 2 point
    two_point_Y = np.zeros((len(two_point_X),2))
    for i in range(len(two_point_X)): 
        two_point_Y[i][1]=1.    
        
    
    #merge 1 and 2 point data
    data_X = np.concatenate((one_point_X, two_point_X))
    data_Y = np.concatenate((one_point_Y, two_point_Y))
    temp = list(zip(data_X,data_Y))
    random.shuffle(temp)
    data_X, data_Y= zip(*temp)
    return np.asarray(data_X), np.asarray(data_Y)

def gen_fewer_one_and_two_point_inputs_labelled_set_two_points(n=28, sigma=2.0):
    
    #dataX for 1 point
    one_point_X = []
    a = np.array([skimage.filters.gaussian_filter(i,sigma) for i in ((np.eye(n*n)*10)).reshape(n,n,n*n).transpose()]).reshape(n*n,n*n)
    for i in range(5):
        for j in range(n*n):
            one_point_X.append(a[j])
    one_point_X = np.asarray(one_point_X)
    #dataY for 1 point
    one_point_Y = np.zeros((len(one_point_X),2))
    for i in range(len(one_point_X)): 
        one_point_Y[i][0]=1.    
        
    #data for 2 points
    two_point_X = []
    for i in range(0,784,10):
        for j in range(i+10, 784,10):
            a = np.zeros(784)
            a[i] = 1
            a[j] = 1
            a = a.reshape((28,28))
            a = skimage.filters.gaussian_filter(a, sigma)
            a = a.reshape(784,)
            two_point_X.append(a)
    two_point_X = np.asarray(two_point_X)
    #dataY for 2 point
    two_point_Y = np.zeros((len(two_point_X),2))
    for i in range(len(two_point_X)): 
        two_point_Y[i][1]=1.    
        
    
    #merge 1 and 2 point data
    data_X = np.concatenate((one_point_X, two_point_X))
    data_Y = np.concatenate((one_point_Y, two_point_Y))
    temp = list(zip(data_X,data_Y))
    random.shuffle(temp)
    data_X, data_Y= zip(*temp)
    return np.asarray(data_X), np.asarray(data_Y)


'''
Generate inputs for TPDT
Total of 1000 1pt and 1000 2pt data
'''    
def gen_inputs_for_TPDT(n=28, sigma=2.0, dist=24):
    dataX = np.zeros((2000,n*n))
    dataY = np.zeros((2000,2))
    
    #two point data
    for i in range(0,1000):
        a = np.zeros((n,n))
        a[14][(int)((n-dist)/2)] = 1
        a[14][n - (int)((n-dist)/2)] = 1
        rot_angle = random.randint(0,90)
        b = skimage.transform.rotate(a,rot_angle,resize=True,mode='nearest')
        c = skimage.transform.resize(b, (28,28))
        d = skimage.filters.gaussian_filter(c,sigma)
        dataX[i] = d.reshape(784,)
        dataY[i][1] = 1.
    
    #one point data
    for i in range(1000,2000):
        a = np.zeros(n*n)
        rannum = random.randint(0,n*n-1)
        a[rannum] = 1
        a = a.reshape(28,28)
        a= skimage. filters.gaussian_filter(a, sigma)
        dataX[i] = a.reshape(784,)
        dataY[i][0] = 1.
    
    #shuffle and mix
    temp = list(zip(dataX,dataY))
    random.shuffle(temp)
    dataX, dataY= zip(*temp)
    return np.asarray(dataX), np.asarray(dataY)

def import_braille():
    alphabet=[]
    for char in range(ord('A'),ord('Z')+1):    
        im = skimage.io.imread("Braille/"+str(unichr(char))+".png", as_grey=True)
        im=-im + 1
        alpha_index = np.zeros(26)
        alpha_index[char-ord('A')]=1.0
        alphabet.append([im, alpha_index])
    return alphabet
    
def import_alphabet():
    alphabet=[]
    for char in range(ord('A'),ord('Z')+1):    
        im = skimage.io.imread("Alphabet/"+str(unichr(char))+".png", as_grey=True)
        im=-im + 1
        alpha_index = np.zeros(26)
        alpha_index[char-ord('A')]=1.0
        alphabet.append([im, alpha_index])
    return alphabet

'''
Generate about 30,000 labelled alphabet data
'''    
def gen_labelled_training_alphabets():
    alphabet = import_alphabet()
    data_X=[]
    data_Y=[]
    for letter in alphabet:
        for i in range(0,1200):
            rot_angle = np.random.randn()*20
            trans_x = np.random.randn()*5
            trans_y = np.random.randn()*5
            rotated_letter = skimage.transform.rotate(letter[0], rot_angle, resize=True, mode='nearest')
            translate_params = skimage.transform.AffineTransform(translation=(trans_x,trans_y))
            translated_letter = skimage.transform.warp(rotated_letter, translate_params)
            final_letter = skimage.transform.resize(translated_letter, (28,28))
            final_letter = skimage.filters.gaussian_filter(final_letter, sigma=1.0)
            data_X.append(final_letter.reshape(784))
            data_Y.append(letter[1])
    temp = list(zip(data_X,data_Y))
    random.shuffle(temp)
    data_X, data_Y = zip(*temp)
    return np.asarray(data_X), np.asarray(data_Y)

'''
Generate about 7800 labelled alphabet data
'''
def gen_labelled_testing_alphabets():
    alphabet = import_alphabet()
    data_X=[]
    data_Y=[]
    for letter in alphabet:
        for i in range(0,300):
            rot_angle = np.random.randn()*20
            trans_x = np.random.randn()*5
            trans_y = np.random.randn()*5
            rotated_letter = skimage.transform.rotate(letter[0], rot_angle, resize=True, mode='nearest')
            translate_params = skimage.transform.AffineTransform(translation=(trans_x,trans_y))
            translated_letter = skimage.transform.warp(rotated_letter, translate_params)
            final_letter = skimage.transform.resize(translated_letter, (28,28))
            final_letter = skimage.filters.gaussian_filter(final_letter, sigma=1.0)
            data_X.append(final_letter.reshape(784))
            data_Y.append(letter[1])
    temp = list(zip(data_X,data_Y))
    random.shuffle(temp)
    data_X, data_Y = zip(*temp)
    return np.asarray(data_X), np.asarray(data_Y)

'''
Generate about 30,000 labelled alphabet data
'''     
def gen_labelled_training_braille():
    alphabet = import_braille()
    data_X=[]
    data_Y=[]
    for letter in alphabet:
        for i in range(0,1200):
            rot_angle = np.random.randn()*20
            trans_x = np.random.randn()*5
            trans_y = np.random.randn()*5
            rotated_letter = skimage.transform.rotate(letter[0], rot_angle, resize=True, mode='nearest')
            translate_params = skimage.transform.AffineTransform(translation=(trans_x,trans_y))
            translated_letter = skimage.transform.warp(rotated_letter, translate_params)
            final_letter = skimage.transform.resize(translated_letter, (28,28))
            final_letter = skimage.filters.gaussian_filter(final_letter, sigma=1.0)
            data_X.append(final_letter.reshape(784))
            data_Y.append(letter[1])
    temp = list(zip(data_X,data_Y))
    random.shuffle(temp)
    data_X, data_Y = zip(*temp)
    return np.asarray(data_X), np.asarray(data_Y)

'''
Generate about 7800 labelled alphabet data
'''
    
def gen_labelled_testing_braille():
    alphabet = import_braille()
    data_X=[]
    data_Y=[]
    for letter in alphabet:
        for i in range(0,300):
            rot_angle = np.random.randn()*20
            trans_x = np.random.randn()*5
            trans_y = np.random.randn()*5
            rotated_letter = skimage.transform.rotate(letter[0], rot_angle, resize=True, mode='nearest')
            translate_params = skimage.transform.AffineTransform(translation=(trans_x,trans_y))
            translated_letter = skimage.transform.warp(rotated_letter, translate_params)
            final_letter = skimage.transform.resize(translated_letter, (28,28))
            final_letter = skimage.filters.gaussian_filter(final_letter, sigma=1.0)
            data_X.append(final_letter.reshape(784))
            data_Y.append(letter[1])
    temp = list(zip(data_X,data_Y))
    random.shuffle(temp)
    data_X, data_Y = zip(*temp)
    return np.asarray(data_X), np.asarray(data_Y)